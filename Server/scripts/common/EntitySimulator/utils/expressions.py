# -*- coding: utf-8 -*-
import datetime

from MysqlUtility import process_param


class Combinable(object):
	"""
	Provides the ability to combine one or two objects with
	some connector. For example F('foo') + F('bar').
	"""

	# Arithmetic connectors
	ADD = '+'
	SUB = '-'
	MUL = '*'
	DIV = '/'
	POW = '^'
	# The following is a quoted % operator - it is quoted because it can be
	# used in strings that also have parameter substitution.
	MOD = '%%'

	# Bitwise operators - note that these are generated by .bitand()
	# and .bitor(), the '&' and '|' are reserved for boolean operator
	# usage.
	BITAND = '&'
	BITOR = '|'

	def _combine(self, other, connector, reversed, node=None):
		if not hasattr(other, 'resolve_expression'):
			other = Value(other)

		if reversed:
			return CombinedExpression(other, connector, self)
		return CombinedExpression(self, connector, other)

	#############
	# OPERATORS #
	#############

	def __add__(self, other):
		return self._combine(other, self.ADD, False)

	def __sub__(self, other):
		return self._combine(other, self.SUB, False)

	def __mul__(self, other):
		return self._combine(other, self.MUL, False)

	def __truediv__(self, other):
		return self._combine(other, self.DIV, False)

	def __div__(self, other):  # Python 2 compatibility
		return type(self).__truediv__(self, other)

	def __mod__(self, other):
		return self._combine(other, self.MOD, False)

	def __pow__(self, other):
		return self._combine(other, self.POW, False)

	def __and__(self, other):
		raise NotImplementedError(
			"Use .bitand() and .bitor() for bitwise logical operations."
		)

	def bitand(self, other):
		return self._combine(other, self.BITAND, False)

	def __or__(self, other):
		raise NotImplementedError(
			"Use .bitand() and .bitor() for bitwise logical operations."
		)

	def bitor(self, other):
		return self._combine(other, self.BITOR, False)

	def __radd__(self, other):
		return self._combine(other, self.ADD, True)

	def __rsub__(self, other):
		return self._combine(other, self.SUB, True)

	def __rmul__(self, other):
		return self._combine(other, self.MUL, True)

	def __rtruediv__(self, other):
		return self._combine(other, self.DIV, True)

	def __rdiv__(self, other):  # Python 2 compatibility
		return type(self).__rtruediv__(self, other)

	def __rmod__(self, other):
		return self._combine(other, self.MOD, True)

	def __rpow__(self, other):
		return self._combine(other, self.POW, True)

	def __rand__(self, other):
		raise NotImplementedError(
			"Use .bitand() and .bitor() for bitwise logical operations."
		)

	def __ror__(self, other):
		raise NotImplementedError(
			"Use .bitand() and .bitor() for bitwise logical operations."
		)


class Expression(Combinable):
	"""
	An expression that can be combined with other expressions.
	"""
	def __init__(self):
		pass

	def resolve_expression(self, metaClass):
		"""
		"""
		raise NotImplementedError("")


class CombinedExpression(Expression):

	def __init__(self, lhs, connector, rhs):
		super(CombinedExpression, self).__init__()
		self.connector = connector
		self.lhs = lhs
		self.rhs = rhs

	def __repr__(self):
		return "<{}: {}>".format(self.__class__.__name__, self)

	def __str__(self):
		return "{} {} {}".format(self.lhs, self.connector, self.rhs)

	def get_source_expressions(self):
		return [self.lhs, self.rhs]

	def set_source_expressions(self, exprs):
		self.lhs, self.rhs = exprs

	def resolve_expression(self, metaClass):
		lhs = self.lhs.resolve_expression(metaClass)
		rhs = self.rhs.resolve_expression(metaClass)
		return " ".join((lhs, self.connector, rhs))


class F(Combinable):
	"""
	An object capable of resolving references to existing query objects.
	"""
	def __init__(self, name):
		"""
		Arguments:
		 * name: the name of the field this expression references
		"""
		self.name = name

	def __repr__(self):
		return "{}({})".format(self.__class__.__name__, self.name)

	def resolve_expression(self, metaClass):
		return metaClass.fields[self.name].db_column



class Value(Expression):
	"""
	Represents a wrapped value as a node within an expression
	"""
	def __init__(self, value):
		"""
		Arguments:
		 * value: the value this expression represents. The value will be
		   added into the sql parameter list and properly quoted.
		"""
		super(Value, self).__init__()
		self.value = value

	def __repr__(self):
		return "{}({})".format(self.__class__.__name__, self.value)

	def resolve_expression(self, metaClass):
		return process_param(self.value).decode()


